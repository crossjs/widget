{
    "project": {
        "name": "widget",
        "description": "widget base class, with events and AOP",
        "version": "1.0.0"
    },
    "files": {
        "src\\aspect.js": {
            "name": "src\\aspect.js",
            "modules": {
                "Widget": 1
            },
            "classes": {
                "Aspect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\widget.js": {
            "name": "src\\widget.js",
            "modules": {},
            "classes": {
                "Widget": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Widget": {
            "name": "Widget",
            "submodules": {},
            "classes": {
                "Aspect": 1,
                "Widget": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\widget.js",
            "line": 22,
            "description": "组件基类"
        }
    },
    "classes": {
        "Aspect": {
            "name": "Aspect",
            "shortname": "Aspect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Widget",
            "namespace": "",
            "file": "src\\aspect.js",
            "line": 13,
            "description": "Aspect\n\nhttp://http://en.wikipedia.org/wiki/Aspect-oriented_programming",
            "is_constructor": 1
        },
        "Widget": {
            "name": "Widget",
            "shortname": "Widget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Widget",
            "namespace": "",
            "file": "src\\widget.js",
            "line": 22,
            "description": "组件基类\n\n扩展 Events 与 Aspect (AOP)",
            "is_constructor": 1,
            "requires": [
                "Events",
                "Aspect"
            ],
            "example": [
                "\n```\n// 创建子类\nvar PersonWidget = Widget.extend({\n  setup: function () {\n    // 通知事件 `setup`\n    this.fire('setup', this.option('name'), this.option('age'));\n  }\n});\n// 创建子类实例\nvar tom = new PersonWidget({\n  name: 'Tom',\n  age: 21,\n  // 订阅事件\n  events: {\n    // `setup`\n    setup: function (e, name, age) {\n      // e === 'setup'\n      // name === 'Tom'\n      // age === 21\n      // this === tom\n    },\n    // AOP `before:setup`\n    'before:setup': function (e) {\n      // 执行 `setup` 方法前执行\n      // 此处返回 `false` 将阻止 `setup` 方法执行\n    },\n    // AOP `before:setup`\n    'before:setup': function (e) {\n      // 执行 `setup` 方法后执行\n      // 如果 `setup` 方法被阻止，就不会执行到这里\n    }\n  },\n  // 代理事件\n  delegates: {\n    'click': function (e) {\n      // e.target === this.element[0]\n      // this === tom\n    },\n    'mouseover .avatar': function (e) {\n      // 鼠标悬停在 element 里的 `.avatar` 元素\n    }\n  }\n});\n```"
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\aspect.js",
            "line": 25,
            "description": "方法执行前执行，`callback`返回`false`则阻止原函数执行",
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "methodName",
                    "description": "方法名",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "回调函数",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "当前实例",
                "type": "Object"
            },
            "class": "Aspect",
            "module": "Widget"
        },
        {
            "file": "src\\aspect.js",
            "line": 36,
            "description": "方法执行后执行",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "methodName",
                    "description": "方法名",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "回调函数",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "当前实例",
                "type": "Object"
            },
            "class": "Aspect",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 80,
            "description": "初始化函数，将自动执行；实现事件自动订阅与初始化组件参数",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "options",
                    "description": "组件参数",
                    "type": "Object"
                }
            ],
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 108,
            "description": "默认参数，子类自动继承并覆盖",
            "itemtype": "property",
            "name": "defaults",
            "type": "{Object}",
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 120,
            "description": "寻找 element 后代",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "选择符",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "jQuery 包装的 DOM 节点",
                "type": "Object"
            },
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 131,
            "description": "自动执行的设置函数，预留用于子类覆盖",
            "itemtype": "method",
            "name": "setup",
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 139,
            "description": "存取组件状态",
            "itemtype": "method",
            "name": "state",
            "params": [
                {
                    "name": "state",
                    "description": "状态值",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前状态值或当前实例",
                "type": "Mixed"
            },
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 155,
            "description": "获取初始化后的组件参数",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "整个参数列表或指定参数值",
                "type": "Mixed"
            },
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 168,
            "description": "存取组件数据；用于管理动态生成的数据，如服务端返回",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "key",
                    "description": "键",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "value",
                    "description": "值",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "整个数据、指定键值或当前实例",
                "type": "Mixed"
            },
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 197,
            "description": "事件订阅，以及AOP",
            "itemtype": "method",
            "name": "initEvents",
            "params": [
                {
                    "name": "events",
                    "description": "订阅事件列表",
                    "type": "Object|Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前实例",
                "type": "Object"
            },
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 227,
            "description": "事件代理，绑定在 element 上",
            "itemtype": "method",
            "name": "initDelegates",
            "params": [
                {
                    "name": "delegates",
                    "description": "代理事件列表",
                    "type": "Object|Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前实例",
                "type": "Object"
            },
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 261,
            "description": "插入elemnt到container",
            "itemtype": "method",
            "name": "render",
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 274,
            "description": "`element` 所在的 `document` 对象",
            "itemtype": "property",
            "name": "document",
            "type": "Object",
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 281,
            "description": "`element` 所在的 `window` 对象",
            "itemtype": "property",
            "name": "viewport",
            "type": "Object",
            "class": "Widget",
            "module": "Widget"
        },
        {
            "file": "src\\widget.js",
            "line": 294,
            "description": "销毁当前组件对象",
            "itemtype": "method",
            "name": "destroy",
            "class": "Widget",
            "module": "Widget"
        }
    ],
    "warnings": []
}